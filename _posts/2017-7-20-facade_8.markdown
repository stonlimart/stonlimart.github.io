---
layout:     post
title:      "设计模式(8)——外观模式"
subtitle:   ""
date:       2017-07-20 22:00:07
author:     "Crow"
#header-img: "img/post-bg-nextgen-web-pwa.jpg"
header-mask: 0.3
catalog:    true
tags:
    - 设计模式
    - 读书笔记
---

**外观（Facade）模式**提供了一个统一的接口，用来访问子系统中的一群接口，外观定义了一个高层接口，让子系统更容易使用。
外观模式很容易理解，它允许我们让客户和子系统之间避免紧耦合。这里先给出它的类图
![](https://pic.yupoo.com/crowhawk/537c68a9/a343b457.png)
外观模式改变接口的原因是为了简化接口，之所以取这个名字，是因为它将一个或数个类的复杂的一切都隐藏在背后，只显露出一个干净美好的外观。

下面用一个实例来说明。我们模拟了一个家庭影院，内含DVD播放器、投影机、自动屏幕、环绕立体声，甚至还有爆米花机。我们需要将系统中的每一个组成部分写成一个类。这里以DVD播放器为例，编写一个类
```java
public class DvdPlayer {
	String description;
	int currentTrack;
	Amplifier amplifier;
	String movie;
	
	public DvdPlayer(String description, Amplifier amplifier) {
		this.description = description;
		this.amplifier = amplifier;
	}
 
	public void on() {
		System.out.println(description + " on");
	}
 
	public void off() {
		System.out.println(description + " off");
	}

        public void eject() {
		movie = null;
                System.out.println(description + " eject");
        }
 
	public void play(String movie) {
		this.movie = movie;
		currentTrack = 0;
		System.out.println(description + " playing \"" + movie + "\"");
	}

	public void play(int track) {
		if (movie == null) {
			System.out.println(description + " can't play track " + track + " no dvd inserted");
		} else {
			currentTrack = track;
			System.out.println(description + " playing track " + currentTrack + " of \"" + movie + "\"");
		}
	}

	public void stop() {
		currentTrack = 0;
		System.out.println(description + " stopped \"" + movie + "\"");
	}
 
	public void pause() {
		System.out.println(description + " paused \"" + movie + "\"");
	}

	public void setTwoChannelAudio() {
		System.out.println(description + " set two channel audio");
	}
 
	public void setSurroundAudio() {
		System.out.println(description + " set surround audio");
	}
 
	public String toString() {
		return description;
	}
}
```
查看其他组件类的完整代码可[点击此处](https://github.com/CrowHawk/DesignPattern-Learning/tree/master/Facade/src/main/java/com/crow)。

我们在开始观赏电影前需要逐一打开这些组件，这些任务将被写成很多类和方法的调用。在看完电影后，你还要把一切都关掉，如果反向地把这一切动作再进行一次，在代码编写上将非常复杂。
为此我们将采用外观模式，通过实现一个提供更合理的接口的外观类，我们可以将一个复杂的子系统变得容易使用。
```java
public class HomeTheaterFacade {
	Amplifier amp;
	Tuner tuner;
	DvdPlayer dvd;
	CdPlayer cd;
	Projector projector;
	TheaterLights lights;
	Screen screen;
	PopcornPopper popper;
 
	public HomeTheaterFacade(Amplifier amp, 
				 Tuner tuner, 
				 DvdPlayer dvd, 
				 CdPlayer cd, 
				 Projector projector, 
				 Screen screen,
				 TheaterLights lights,
				 PopcornPopper popper) {
 
		this.amp = amp;
		this.tuner = tuner;
		this.dvd = dvd;
		this.cd = cd;
		this.projector = projector;
		this.screen = screen;
		this.lights = lights;
		this.popper = popper;
	}
 
	public void watchMovie(String movie) {
		System.out.println("Get ready to watch a movie...");
		popper.on();
		popper.pop();
		lights.dim(10);
		screen.down();
		projector.on();
		projector.wideScreenMode();
		amp.on();
		amp.setDvd(dvd);
		amp.setSurroundSound();
		amp.setVolume(5);
		dvd.on();
		dvd.play(movie);
	}
 
 
	public void endMovie() {
		System.out.println("Shutting movie theater down...");
		popper.off();
		lights.on();
		screen.up();
		projector.off();
		amp.off();
		dvd.stop();
		dvd.eject();
		dvd.off();
	}

	public void listenToCd(String cdTitle) {
		System.out.println("Get ready for an audiopile experence...");
		lights.on();
		amp.on();
		amp.setVolume(5);
		amp.setCd(cd);
		amp.setStereoSound();
		cd.on();
		cd.play(cdTitle);
	}

	public void endCd() {
		System.out.println("Shutting down CD...");
		amp.off();
		amp.setCd(cd);
		cd.eject();
		cd.off();
	}

	public void listenToRadio(double frequency) {
		System.out.println("Tuning in the airwaves...");
		tuner.on();
		tuner.setFrequency(frequency);
		amp.on();
		amp.setVolume(5);
		amp.setTuner(tuner);
	}

	public void endRadio() {
		System.out.println("Shutting down the tuner...");
		tuner.off();
		amp.off();
	}
}
```
这样一来，我们在测试程序中编写观看电影的代码时，将十分轻松：
```java
public class HomeTheaterTestDrive {
	public static void main(String[] args) {
		Amplifier amp = new Amplifier("Top-O-Line Amplifier");
		Tuner tuner = new Tuner("Top-O-Line AM/FM Tuner", amp);
		DvdPlayer dvd = new DvdPlayer("Top-O-Line DVD Player", amp);
		CdPlayer cd = new CdPlayer("Top-O-Line CD Player", amp);
		Projector projector = new Projector("Top-O-Line Projector", dvd);
		TheaterLights lights = new TheaterLights("Theater Ceiling Lights");
		Screen screen = new Screen("Theater Screen");
		PopcornPopper popper = new PopcornPopper("Popcorn Popper");
 
		HomeTheaterFacade homeTheater = 
				new HomeTheaterFacade(amp, tuner, dvd, cd, 
						projector, screen, lights, popper);
 
		homeTheater.watchMovie("Raiders of the Lost Ark");//简化的接口
		homeTheater.endMovie();
	}
}
```

### 设计原则

外观模式体现了又一个设计原则——**最少知识原则：只和你的密友谈话。**这个原则告诉我们要减少对象之间的交互，只留下几个“密友”，即在设计中，不要让太多的类耦合在一起。

这个原则为我们提供了一些方针：就任何对象而言，在该对象的方法内，我们只应该调用属于以下范围的方法：
+ 该对象本身
+ 被当作方法的参数而传递进来的对象
+ 此方法所创建或实例化的任何对象
+ 此对象的任何组件

值得一提的是，这一原则虽然减少了对象之间的依赖，减少了软件的维护成本；但是采用这个原则也会导致更多的“包装”类被制造出来，以处理和其他组件的沟通，这可能会导致复杂度和开发时间的增加，并降低运行时的性能。在开发过程中，我们需要根据实际情况进行取舍，在本文的例子中，很明显采用最少知识原则带来的软件维护的便利远大于其弊端。
