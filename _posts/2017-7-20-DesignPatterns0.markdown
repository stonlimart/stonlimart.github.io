---
layout:     post
title:      "设计模式(0)——概述"
subtitle:   ""
date:       2017-07-20 22:00:00
author:     "Crow"
#header-img: "img/post-bg-nextgen-web-pwa.jpg"
header-mask: 0.3
catalog:    true
tags:
    - 设计模式
    - 读书笔记
---

> 笔者最近适逢研究生暑假，获得了难得的休息时间，想趁着自由的时光多巩固技术基础，打劳基本功。刚刚过去的这个学期写了不少代码，工程方面也基本完成了一个网站项目，但愈发频繁地觉得自己写的代码很丑陋，却不能准确地表达对自己代码具体的感觉，遂决定研读一下设计模式相关的书籍，解决自己的一些困惑，提升一下代码质量，也便于从新的角度去理解很多框架设计的精髓。我选择的设计模式入门书籍是《Head First Design Patterns》，在读完这本书后，结合自己的体会写了该系列主题博客，一是以备自己日后回顾温习，二是供同样初入设计模式大门的程序员们参考学习。作者水平有限，文中若有错漏之处，还望不吝指出。

## 概述

+ 知道OO基础，并不足以让你设计出良好的OO系统。
+ 良好的OO设计必须具备可复用、可扩充、可维护三个特性。
+ 模式可以让我们建造出具有良好OO设计质量的系统。
+ 模式被认为是历经验证的OO设计经验。
+ 模式不是代码，而是针对设计问题的通用解决方案。你可把它们应用到特定的应用中。
+ 模式不是被发明，而是被发现。
+ 大多数的模式和原则，都着眼于软件变化的主题。
+ 大多数的模式都允许系统局部改变独立于其他部分。
+ 我们常把系统中会变化的部分抽出来封装。

## 设计原则

+ 封装变化
+ 多用组合，少用继承
+ 针对接口编程，不针对实现编程
+ 为交互对象之间的松耦合设计而努力
+ 类应该对扩展开放，对修改关闭
+ 依赖抽象，不要依赖具体类
+ 只和朋友交谈
+ 别找我，我会找你
+ 类应该只有一个改变的理由

## 模式分类

设计模式根据目的可以分为三大类，分别是**创建型设计模式**、**行为型设计模式**以及**结构型设计模式**。
创建型模式涉及到将对象实例化，这类模式都提供一个方法，将客户从所需要实例化的对象中解藕。
行为型模式涉及到类和对象如何交互及分配职责。
结构型模式可以让你把类或对象组合到更大的结构中。

**创建型设计模式**
+ 单例模式(Singleton)
+ 构建模式(Builder)
+ 原型模式(Prototype)
+ 抽象工厂模式(Abstract Factory)
+ 工厂方法模式(Factory Method)

**行为设计模式**
+ 策略模式(Strategy)
+ 状态模式(State)
+ 责任链模式(Chain of Responsibility)
+ 解释器模式(Interpreter)
+ 命令模式(Command)
+ 观察者模式(Observer)
+ 备忘录模式(Memento)
+ 迭代器模式(Iterator)
+ 模板方法模式(Template Method)
+ 访问者模式(Visitor)
+ 中介者模式(Mediator) 

**结构型设计模式**
+ 装饰者模式(Decorator)
+ 代理模式(Proxy)
+ 组合模式(Composite)
+ 桥连接模式(Bridge)
+ 适配器模式(Adapter)
+ 蝇量模式(Flyweight)
+ 外观模式(Facade)
