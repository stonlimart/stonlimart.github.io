---
layout:     post
title:      "MyBatis学习笔记(9)——高级映射之一对多映射"
subtitle:   ""
date:       2017-03-24 14:00:00
author:     "Crow"
#header-img: "img/post-bg-nextgen-web-pwa.jpg"
header-mask: 0.3
catalog:    true
tags:
    - 框架
---

> 案例：查询所有订单信息及订单下的订单明细信息，一个订单下会有多条明细信息，所以这是一对多的查询。

## SQL语句

+ 查询的主表：订单表orders
+ 查询的关联表：订单明细表orderdetail

在一对一查询基础上添加订单明细表关联即可。
SQL语句如下：
```sql
SELECT 
  orders.*,
  USER.username,
  USER.sex,
  USER.address,
  orderdetail.id orderdetail_id,
  orderdetail.items_id,
  orderdetail.items_num,
  orderdetail.orders_id
FROM
  orders,
  USER,
  orderdetail
WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id
```

## 实现方案分析

若使用`resultType`将上边的查询结果映射到pojo中，**查到的订单信息（orders信息）可能会发生重复（查询到的主表orders信息相同，只有关联表orderdetail信息不同）**。这显然是不合适的，为了避免orders映射出现重复记录，只能使用`resultMap`方法。可以在Orders类中添加`List<orderDetail> orderDetails`属性。最终会**将订单信息映射到orders中，订单所对应的订单明细映射到orders中的orderDetails属性中**。

## 使用resultMap实现一对多映射

### pojo(Orders.java)
在Orders.java中添加orderDetails属性
```java
//订单明细
private List<OrderDetail> orderDetails;
```
### OrdersCustomMapper.xml

#### 定义resultMap
resultMap的定义也可以继承，通过`extends`语句实现，从而避免了书写重复代码。
并使用`collection`标签来配置映射的关联的订单明细信息，注意`collection`与`association`的区别：`collection`把关联查询到的**多条记录**映射到pojo集合对象中，而`association`是把关联查询到的**单条记录**映射到pojo对象中。
```xml
<resultMap id="OrdersAndDetailResultMap" type="com.crow.po.Orders" extends="OrdersUserResultMap">
        <!--订单明细信息
        一个订单关联查询出了多条明细，要使用collection进行映射
        collection：对关联查询到多条记录映射到集合对象中
		property：将关联查询到多条记录映射到cn.itcast.mybatis.po.Orders哪个属性
		ofType：指定映射到list集合属性中pojo的类型
        -->
        <collection property="orderDetails" ofType="com.crow.po.OrderDetail">
            <id column="orderdetail_id" property="id"/>
            <result column="items_id" property="itemsId"/>
            <result column="items_num" property="itemsNum"/>
            <result column="orders_id" property="ordersId"/>
        </collection>
    </resultMap>
```

#### 定义statement

```xml
<select id="findOrderAndDetailResultMap" resultMap="OrdersAndDetailResultMap">
        SELECT
		  orders.*,
		  USER.username,
		  USER.sex,
		  USER.address,
		  orderdetail.id orderdetail_id,
		  orderdetail.items_id,
		  orderdetail.items_num,
		  orderdetail.orders_id
		FROM
		  orders,
		  USER,
		  orderdetail
		WHERE orders.user_id = user.id AND orderdetail.orders_id=orders.id
</select>
```

### OrderCustomMapper.java

```java
public List<Orders> findOrderAndDetailResultMap();
```

### 测试代码

```java
@Before
    public void setUp() throws Exception {
        // 创建sqlSessionFactory

        // mybatis配置文件
        String resource = "SqlMapConfig.xml";
        // 得到配置文件流
        InputStream inputStream = Resources.getResourceAsStream(resource);

        // 创建会话工厂，传入mybatis的配置文件信息
        sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    }

@Test
    public void testFindOrderAndDetailResultMap() throws Exception{
        SqlSession sqlSession = sqlSessionFactory.openSession();
        OrdersCustomMapper ordersCustomMapper = sqlSession.getMapper(OrdersCustomMapper.class);
        List<Orders> ordersList = ordersCustomMapper.findOrderAndDetailResultMap();
        System.out.println(ordersList);
        sqlSession.close();
    }
```
在`System.out.println(ordersList);`处打断点，运行结果为
![](http://pic.yupoo.com/crowhawk/GjORJQwr/RR9bv.jpg)
