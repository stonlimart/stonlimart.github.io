---
layout:     post
title:      "MyBatis学习笔记(6)——输出映射"
subtitle:   ""
date:       2017-03-23 12:00:00
author:     "Crow"
#header-img: "img/post-bg-nextgen-web-pwa.jpg"
header-mask: 0.3
catalog:    true
tags:
    - 框架
---

> MyBatis的输出映射分为两种方式，resultType和resultMap

# resultType

## 输出简单类型

**需求：**用户信息的综合查询列表总数。

### UserMap.xml(映射文件)

```xml
<!-- 用户信息综合查询总数
        parameterType：指定输入类型和findUserList一样
        resultType：输出结果类型
    -->
    <select id="findUserCount" parameterType="com.crow.po.UserQueryVo" resultType="int">
        SELECT count(*) FROM USER WHERE user.sex=#{userCustom.sex} AND user.username LIKE '%${userCustom.username}%'
    </select>
```

### UserMapper.java(Mapper接口)

```java
public int findUserCount(User user) throws Exception;
```

### 测试代码

```java
@Before
    public void setUp() throws IOException {
        String resource = "SqlMapConfig.xml";
        InputStream inputStream = Resources.getResourceAsStream(resource);
        sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    }
    
@Test
    public void testFindUserCount() throws Exception {

        SqlSession sqlSession = sqlSessionFactory.openSession();

        //创建UserMapper对象，mybatis自动生成mapper代理对象
        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);

        //创建包装对象，设置查询条件
        UserQueryVo userQueryVo = new UserQueryVo();
        UserCustom userCustom = new UserCustom();
        userCustom.setSex("1");
        userCustom.setUsername("张三丰");
        userQueryVo.setUserCustom(userCustom);
        //调用userMapper的方法

        int count = userMapper.findUserCount(userQueryVo);

        System.out.println(count);
    }
```

运行结果为

![](http://pic.yupoo.com/crowhawk/GjHRKy8C/zacHJ.jpg)

**小结：**查询出来的结果集只有一行且一列，可以使用简单类型进行输出映射。

## 输出pojo对象和pojo列表

不管是输出的pojo单个对象还是一个列表（list中包括pojo），在`mapper.xml`中`resultType`指定的类型是一样的。
在`mapper.java`指定的方法返回值类型不一样：
1. 输出单个pojo对象，方法返回值是单个对象类型
```java
//根据id查询用户信息
public User findUserById(int id) throws Exception;
```
返回单个pojo对象要保证sql查询出来的结果集为单条，内部使用`session.selectOne`方法调用，mapper接口使用pojo对象作为方法返回值。
2. 输出pojo对象list，方法返回值是`List<Pojo>`
```java
//根据用户名列查询用户列表
public List<User> findUserByName(String name)throws Exception;
```
返回pojo列表表示查询出来的结果集可能为多条，内部使用`session.selectList`方法，mapper接口使用`List<Pojo>`对象作为方法返回值。

### 注意

使用resultType进行输出映射时：
+ 如果查询出来的列名和pojo中的属性名全部不一致，则不会创建pojo对象。
+ 只要查询出来的列名和pojo中的属性有一个一致，就会创建pojo对象，但如果不全部一致，则映射失败。
+ 只有查询出来的列名和pojo中的属性名一致，该列才可以映射成功。

# resultMap

+ resultType可以指定pojo**将查询结果映射为pojo**，但需要**pojo的属性名**和**sql查询的列名**一致方可映射成功。
+ 如果**sql查询字段名**和**pojo的属性名**不一致，可以通过resultMap将字段名和属性名作一个对应关系 ，resultMap实质上还需要将查询结果映射到pojo对象中。
+ resultMap可以实现**将查询结果映射为复杂类型的pojo**，比如在查询结果映射对象中包括pojo和list实现**一对一**查询和**一对多**查询。

## resultMap使用方法

如果查询出来的列名和pojo的属性名不一致，通过定义一个resultMap对**列名**和**pojo属性名**之间作一个映射关系。
1. 定义resultMap
2. 使用resultMap作为statement的输出映射类型

## 将下边的sql使用User完成映射

```sql
SELECT id id_,username username_ FROM USER WHERE id=#{value}
```
User类中属性名和上边查询列名不一致。

### 定义reusltMap

```xml
<!-- 定义resultMap
	将SELECT id id_,username username_ FROM USER 和User类中的属性作一个映射关系
	type：resultMap最终映射的java对象类型,可以使用别名
	id：对resultMap的唯一标识
	 -->
	 <resultMap type="user" id="userResultMap">
	 	<!-- id表示查询结果集中唯一标识
	 	column：查询出来的列名
	 	property：type指定的pojo类型中的属性名
	 	最终resultMap对column和property作一个映射关系 （对应关系）
	 	-->
	 	<id column="id_" property="id"/>
	 	<!--
	 	result：对普通名映射定义
	 	column：查询出来的列名
	 	property：type指定的pojo类型中的属性名
	 	最终resultMap对column和property作一个映射关系 （对应关系）
	 	 -->
	 	<result column="username_" property="username"/>
	 </resultMap>
```

### 使用resultMap作为statement的输出映射类型

```xml
<!-- 使用resultMap进行输出映射
        resultMap：指定定义的resultMap的id，如果这个resultMap在其它的mapper文件，前边需要加namespace
-->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        SELECT id id_,username username_ FROM USER WHERE id=#{value}
    </select>
```

### 	UserMapper.java

```java
//根据id查询用户信息，使用resultMap输出
public User findUserByIdResultMap(int id) throws Exception;
```

### 测试代码

```java
@Before
    public void setUp() throws IOException {
        String resource = "SqlMapConfig.xml";
        InputStream inputStream = Resources.getResourceAsStream(resource);
        sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
    }

@Test
public void testFindUserByIdResultMap() throws Exception {

	SqlSession sqlSession = sqlSessionFactory.openSession();

	//创建UserMapper对象，mybatis自动生成mapper代理对象
	UserMapper userMapper = sqlSession.getMapper(UserMapper.class);

	//调用userMapper的方法

	User user = userMapper.findUserByIdResultMap(1);

	System.out.println(user);
}
```

运行结果如下
![](http://pic.yupoo.com/crowhawk/GjFSySrd/15t8Sh.jpg)

# 小结
使用`resultType`进行输出映射时，只有查询出来的列名和pojo中的属性名一致，该列才可以映射成功。如果查询出来的列名和pojo的属性名不一致，通过定义一个`resultMap`对列名和pojo属性名之间作一个映射关系。
此外，`resultMap`还可以做一对多、多对多等高级映射，这些内容将在后续文章中介绍。

